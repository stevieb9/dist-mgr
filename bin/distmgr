#!/usr/bin/env perl
use warnings;
use strict;

# create
# dist-mgr/bin/distmgr create -m Test::Module -a Steve Bertrand -e steveb@cpan.org -u stevieb9 -r test-module -V

# release
# ./../repos/dist-mgr/bin/distmgr release -m Acme::STEVEB -u stevieb9 -r acme-steveb -V

use Capture::Tiny qw(:all);
use Cwd qw(getcwd);
use Data::Dumper;
use Dist::Mgr qw(:private);
use Getopt::Long qw(:config no_ignore_case);

my $cmd = _init();    # shifts @ARGV

my %args;
my $git = _validate_git();

GetOptions(
    "h|help"      => \$args{help},
    "m|module=s@" => \$args{module},
    "a|author=s"  => \$args{author},
    "e|email=s"   => \$args{email},
    "r|repo=s"    => \$args{repo},
    "u|user=s"    => \$args{user},
    "i|cpanid=s"  => \$args{cpan_id},
    "p|cpanpw=s"  => \$args{cpan_pw},
    "d|dryrun"    => \$args{cpan_dryrun},
    "v|version=s" => \$args{version},
    "V|verbose"   => \$args{verbose},

    "g|gitignore"   => \$args{install_gitignore},
    "c|ci"          => \$args{install_ci},
    "B|badges"      => \$args{add_badges},
    "b|bugtracker"  => \$args{add_bugtracker},
    "R|repository"  => \$args{add_repository},
    "A|all"         => \$args{install_all},
);

$args{cpan_id} //= $ENV{CPAN_USERNAME};
$args{cpan_pw} //= $ENV{CPAN_PASSWORD};

commands()->{$cmd}(%args);

# Commands

sub create {
    my (%args) = @_;

    for (qw(module author email)) {
        if (! $args{$_}) {
            warn "create: requires --module --author --email\n";
            exit;
        }
    }
    for (qw(repo user)) {
        if (! exists $args{$_} || ! defined $args{$_}) {
            warn "Git functionality disabled... need both '--repo' and '--user'\n\n";
            $git = 0;
            last;
        }
    }

    my $module = $args{module}->[0];
    my $dir;

    # Clone the repository, or create the directory if no VCS
    if ($git) {
        git_clone($args{user}, $args{repo}, $args{verbose});
        $dir = $args{repo};
    }
    else {
        $dir = $module;
        $dir =~ s/::/-/g;
        mkdir $dir or die "ERROR: Can't create the '$dir' directory: $!";
    }

    # Change into module directory
    chdir $dir or die "ERROR: Can't change into the '$dir' directory: $!";

    # Create the distribution
    $args{modules} = $args{module};
    init(%args);

    # Move the files to the module dir
    move_distribution_files($module);

    # Remove our unwanted files
    remove_unwanted_files();

    # Changes
    changes($module);

    # MANIFEST.SKIP
    manifest_skip();

    # manifest.t
    manifest_t();

    # Git actions
    if ($git) {
        # .gitignore
        git_ignore();

        # CI config
        ci_github();

        # CI/Coverage badges
        ci_badges($args{user}, $args{repo});

        # Add bugtracker to Makefile.PL
        add_bugtracker($args{user}, $args{repo});

        # Add repository to Makefile.PL
        add_repository($args{user}, $args{repo});

        # git add
        git_add($args{verbose});

        # git commit
        git_commit("Initial import of $module", $args{verbose});

        # git push
        git_push($args{verbose});
    }
}
sub cycle {
    my (%args) = @_;

    my $module = _get_module();

    _check_repo();

    # Version (updated)
    my $module_file = $module;
    $module_file =~ s/::/\//g;
    $module_file = 'lib/' . $module_file . '.pm';

    my $ver;
    if (! eval { $ver = version_info($module_file)->{$module_file}; 1 }) {
        die "ERROR: The $module_file file for $module can't be found\n";
    }

    my $ver_incr = version_incr($ver);

    version_bump($ver_incr, $module_file);

    changes_bump($ver_incr);

    if ($git) {
        git_commit("Prep for $ver_incr");
        git_push();
    }

    print "\nSuccessfully cycled to the next development version\n";
}
sub dist {
    my (%args) = @_;

    for (qw(module author email)) {
        if (! exists $args{$_}) {
            warn "create: requires '$_' argument\n";
            exit;
            #help();
        }
    }

    my $module = $args{module}->[0];
    my $dir = $module;
    $dir =~ s/::/-/g;
    mkdir $dir or die "ERROR: Can't create the '$dir' directory: $!";

    # Change into module directory
    chdir $dir or die "ERROR: Can't change into the '$dir' directory: $!";

    # Create the distribution
    $args{modules} = $args{module};
    init(%args);

    # Move the files to the module dir
    move_distribution_files($module);

    # Remove our unwanted files
    remove_unwanted_files();

    # Changes
    changes($module);

    # MANIFEST.SKIP
    manifest_skip();

    # manifest.t
    manifest_t();
}
sub install {
    my (%args) = @_;

    git_ignore() if $args{install_gitignore} || $args{install_all};
    ci_github()  if $args{install_ci}        || $args{install_all};

    if (! defined $args{user} || ! defined $args{repo}) {
        if ($args{add_badges}) {
            die "ERROR: --badges requires --user and --repo\n";
        }
        if ($args{add_bugtracker}) {
            die "ERROR: --bugtracker requires --user and --repo\n";
        }
        if ($args{add_repository}) {
            die "ERROR: --repository requires --user and --repo\n";
        }
        if ($args{install_all}) {
            die "ERROR: badges, bugtracker and repository require --user and --repo\n";
        }
    }

    ci_badges($args{user}, $args{repo})      if $args{add_badges}        || $args{install_all};
    add_bugtracker($args{user}, $args{repo}) if $args{add_bugtracker}    || $args{install_all};
    add_repository($args{user}, $args{repo}) if $args{add_repository}    || $args{install_all};
}
sub release {
    my (%args) = @_;

    my $module = _get_module();

    _check_repo();

    # Changes (Add release date)
    changes_date();

    # Git release (commit, push, CI)
    my $module_file = $module;
    $module_file =~ s/::/\//g;
    $module_file = 'lib/' . $module_file . '.pm';

    # Version (current)
    my $ver;
    if (! eval { $ver = version_info($module_file)->{$module_file}; 1 }) {
        die "ERROR: The $module_file file for $module can't be found\n";
    }

    # make test

    if (! eval { make_test(); 1 }) {
        die "\nERROR: Local 'make test' failed. Intervention required. Halting the release procedure\n";
    }

    # CI testing
    if ($git && ! git_status()) {
        if (! git_release($ver)) {
            die "\nERROR: User cancelled the release process due to failing CI testing\n";
        }
    }

    # Bundle distribution

    make_dist();

    # CPAN upload

    if ($args{cpan_id} && $args{cpan_pw}) {
        (my $dist = $module) =~ s/::/-/g;
        my $dist_file = (glob("${dist}-*.tar.gz"))[-1];

        my $cpan_msg = capture_merged {
            cpan_upload($dist_file, dry_run => $args{cpan_dryrun});
        };

        if ($cpan_msg =~ /Message:\s+(.*)/) {
            die "ERROR: CPAN failed with error '$1'. Couldn't upload.\n";
        }
    }

    # Clean the working directory

    make_distclean();

    # Git tag && push

    git_tag($ver);
    git_push();

    print "\nRelease process completed successfully\n";
}

# Functional

sub help {
    my @data = <DATA>;
    print $_ for @data;
    exit;
}
sub commands {
    return {
        create  => \&create,
        cycle   => \&cycle,
        dist    => \&dist,
        install => \&install,
        release => \&release,
    };
}

# Private

sub _init {
    help() if ! @ARGV;
    my $command = shift @ARGV;
    help() if ! defined commands()->{$command};
    return $command;
}
sub _check_repo {
    if ($git) {
        if (git_repo() =~ /^\d+$/) {
            warn "Disabling Git as it doesn't appear as though you're in a " .
                "repository directory\n";
            $git = 0;
        }
    }
}
sub _get_module {
    if ($args{modules}) {
        return $args{modules}->[0];
    }
    else {
        open my $fh, '<', 'Makefile.PL'
            or die "Can't open Makefile.PL to find distribution name. Send in --module\n";

        while (<$fh>) {
            if (/^\s+NAME.*'(.*)'/) {
                return $1;
            }
        }
        die "Can't automatically find module name. Send in --module\n";
    }
}
sub _check_repo_info {
    my (%args) = @_;
}

__DATA__
Usage: distmgr <command> [OPTIONS]

Commands:

create - Creates a full blown distribution with everything included


    -m | --module   Mandatory: The module name (eg. Test::Module)
    -a | --author   Mandatory: The name of the author (eg. Steve Bertrand)
    -e | --email    Mandatory: The email address of the author
    -u | --user     Optional:  The Github username (eg. stevieb9)
    -r | --repo     Optional:  The Github repository name (eg. test-module)
    -V | --verbose  Optional:  Display verbose output for each process

Notes: We will skip adding repository information, skip adding CI badge info,
and skip adding repository and bugtracker information to C<Makefile.PL> file
if --user or --repo are not present in the parameter list.

cycle
    -v| --version

dist - Creates a bare-bones distribution with just the basics

    -m | --module   Mandatory: The module name (eg. Test::Module)
    -a | --author   Mandatory: The name of the author (eg. Steve Bertrand)
    -e | --email    Mandatory: The email address of the author
    -V | --verbose  Optional:  (Flag) Display verbose output for each process

install - Installs/adds various files or file sections (all flags)

    -g | --gitignore    Install .gitignore file
    -c | --ci           Install Github Actions CI configuration file
    -B | --badges       Insert CI/Coverage badges links into the module's POD
    -b | --bugtracker   Insert bugtracker information into Makefile.PL
    -R | --repository   Insert repository information into Makefile.PL
    -A | --all          Insert/Install all above options

Notes: For badges, bugtracker and repository, the --user and --repo arguments
must be supplied.

release

    -i | --cpanid   Optional:  Your PAUSE userid
    -p | --cpanpw   Optional:  Your PAUSE userid's password
    -d | --dryrun   Optional:  (Flag) Don't actually upload to the CPAN

Notes: No Git operations will be performed without C<--repo> and C<--user>. If
the C<--cpanid> or C<--cpanpw> aren't available or the C<CPAN_USERNAME> or
C<CPAN_PASSWORD> environment variables aren't set, we won't upload to the CPAN.
